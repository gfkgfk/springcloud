#服务端口
server.port=8001

# 需要进行消息注册的请求地址，不需要用户名密码验证
#defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka
#其他服务想注册到Eureka上需要添加用户名和密码进行认证
eureka.client.service-url.defaultZone=http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:${server.port}/eureka

#表示当前服务不会注册到服务中心
eureka.client.register-with-eureka=false

#表示当前服务不会拉取其他服务
eureka.client.fetch-registry=false

#指定了Eureka服务端的IP
eureka.instance.hostname=localhost

eureka.dashboard.path=/eurekaui

#Eureka保护模式关闭
#微服务在部署之后可能由于网络问题造成Eureka客户端无法成功的发送心跳给Eureka服务端，这时候Eureka服务端认定Eureka客户端已经挂掉了，虽然实际上Eureka客户端还在正常的运行着。而保护模式就是为了解决这个问题，即当Eureka服务端在短时间内同时丢失了过多的Eureka客户端时，Eureka服务端会进入保护模式，不去剔除这些客户端。因为我们这里只部署了一个Eureka客户端服务，所以关闭客户端后满足“短时间内丢失过多Eureka客户端”的条件。
#在开发中可以先将保护模式给关了
eureka.server.enable-self-preservation=false
#可以适当通过设置eureka的清理时间，以及要注册的服务端的心跳间隔时间
eureka.server.eviction-interval-timer-in-ms=1000
#设置心跳的时间间隔( default:30s )
eureka.instance.lease-renewal-interval-in-seconds=2 
#如果现在超过了5s的时间间隔( default: 90 s )
eureka.instance.lease-expiration-duration-in-seconds=5

# 登录Eureka所需的用户名和密码
spring.security.user.name=admin
spring.security.user.password=admin